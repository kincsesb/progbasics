document.addEventListener('DOMContentLoaded', () => {
  // ------------------------
  // HTML ELEMEK LEK√âR√âSE
  // ------------------------

  // üîπ ID n√©lk√ºli elem keres√©se - Rossz m√≥dszer
  const randomDiv = document.querySelector('.random-div');
  console.log('‚ùó ID n√©lk√ºli elem (gyenge m√≥dszer):', randomDiv.textContent);

  // üîπ `test-key` haszn√°lata - J√≥ m√≥dszer
  const importantElement = document.querySelector('[test-key="important-element"]');
  console.log('‚úÖ Fontos elem `test-key` alapj√°n:', importantElement.textContent);

  // ------------------------
  // SHADOW DOM KEZEL√âSE
  // ------------------------

  // üîπ Shadow DOM el√©r√©s pr√≥b√°lkoz√°s k√∂zvetlen√ºl (NEM FOG M≈∞K√ñDNI)
  const shadowHost = document.querySelector('.shadow-host');
  const shadowContentBefore = shadowHost.querySelector('div'); // ‚ùå Nem m≈±k√∂dik
  console.log('üö´ Shadow DOM nyit√°s el≈ëtt:', shadowContentBefore);

  // üîπ Shadow DOM el√©r√©s NYIT√ÅS UT√ÅN (HELYES M√ìDSZER)
  const shadowRoot = shadowHost.shadowRoot; // Shadow DOM megnyit√°sa
  const shadowContentAfter = shadowRoot.querySelector('div');
  console.log('‚úÖ Shadow DOM nyit√°s ut√°n:', shadowContentAfter.textContent);

  // ------------------------
// IFRAME KEZEL√âSE
// ------------------------

// üîπ K√ºls≈ë (cross-origin) iframe kezel√©se
const externalIframe = document.querySelector('[test-key="external-iframe"]');

externalIframe.addEventListener('load', () => {
    try {
        const iframeDocumentBefore = externalIframe.contentDocument || externalIframe.contentWindow.document;

        if (iframeDocumentBefore) {
            console.log('üö´ K√ºls≈ë iframe tartalma (NEM EL√âRHET≈ê):', iframeDocumentBefore.body.innerHTML);
        } else {
            console.log('‚ùå K√ºls≈ë iframe tartalma nem el√©rhet≈ë.');
        }
    } catch (error) {
        console.log('‚ùå K√ºls≈ë iframe tartalma nem el√©rhet≈ë cross-origin policy miatt.');
    }
});

// üîπ Bels≈ë (azonos domainen l√©v≈ë) iframe kezel√©se
const internalIframe = document.querySelector('[test-key="internal-iframe"]');

internalIframe.addEventListener('load', () => {
    try {
        const iframeDocument = internalIframe.contentDocument || internalIframe.contentWindow.document;

        if (iframeDocument) {
            const iframeText = iframeDocument.getElementById('iframe-text').textContent;
            console.log('‚úÖ Bels≈ë iframe tartalma:', iframeText);
        } else {
            console.log('‚ùå Bels≈ë iframe tartalma nem el√©rhet≈ë.');
        }
    } catch (error) {
        console.log('‚ùå Bels≈ë iframe tartalma nem el√©rhet≈ë k√∂zvetlen√ºl.');
    }
});

  // ------------------------
  // ESEM√âNYKEZEL√âS
  // ------------------------

/*
A gener√°torf√ºggv√©nyek (function*) olyan speci√°lis f√ºggv√©nyek, amelyek t√∂bb √©rt√©ket tudnak l√©p√©senk√©nt visszaadni a yield kulcssz√≥ seg√≠ts√©g√©vel. 
Ezek rendk√≠v√ºl hasznosak, ha egy sorozat elemeit szeret.prettierrcn√©nk fokozatosan feldolgozni, p√©ld√°ul iter√°ci√≥ sor√°n.
*/
function* numberGenerator() {
  yield 1;
  yield 2;
  yield 3;
}
const gen = numberGenerator();

console.log(gen.next().value); // 1
console.log(gen.next().value); // 2
console.log(gen.next().value); // 3

// ------------------------
// Met√≥dus p√©lda
// ------------------------
const calculator = {
  add: function (a, b) {
    return a + b;
  },
  multiply: (a, b) => a * b, // Arrow function met√≥dusk√©nt (nem aj√°nlott `this` miatt)
};

console.log('Met√≥dus - √ñsszead√°s:', calculator.add(3, 5));
console.log('Met√≥dus - Szorz√°s:', calculator.multiply(4, 2));

// ------------------------
// Prompt p√©lda
// ------------------------
// prompt() csak b√∂ng√©sz≈ëben m≈±k√∂dik
// let username = prompt('Mi a neved?');
// console.log(`Szia, ${username}!`);

// ------------------------
// Git alapok
// ------------------------
// Parancsok (parancssorban futtatand√≥ak)
// git init
// git status
// git add .
// git commit -m "Elso commit"
// git remote add origin <URL>
// git push -u origin main
